[{"C:\\work\\blueone\\front\\pages\\index.tsx":"1","C:\\work\\blueone\\front\\pages\\login.tsx":"2","C:\\work\\blueone\\front\\pages\\temp.tsx":"3","C:\\work\\blueone\\front\\pages\\worker\\index.tsx":"4","C:\\work\\blueone\\front\\pages\\worker\\notice\\index.tsx":"5","C:\\work\\blueone\\front\\pages\\worker\\setting.tsx":"6","C:\\work\\blueone\\front\\pages\\_app.tsx":"7","C:\\work\\blueone\\front\\components\\Admin\\content\\index.tsx":"8","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\AddButton.tsx":"9","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\AddForm.tsx":"10","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\DeleteButton.tsx":"11","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\EditButton.tsx":"12","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\EditForm.tsx":"13","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\index.tsx":"14","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\styles.tsx":"15","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\UserItem.tsx":"16","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkAddForm\\index.tsx":"17","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkAddForm\\styles.tsx":"18","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkAddForm\\UserSelecter.tsx":"19","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\columns.tsx":"20","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\DeleteButton.tsx":"21","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\EditButton.tsx":"22","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\EditForm.tsx":"23","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\index.tsx":"24","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\styles.tsx":"25","C:\\work\\blueone\\front\\components\\Admin\\Layout\\index.tsx":"26","C:\\work\\blueone\\front\\components\\Admin\\Layout\\styles.tsx":"27","C:\\work\\blueone\\front\\components\\Login\\Form\\index.tsx":"28","C:\\work\\blueone\\front\\components\\Login\\Form\\styles.tsx":"29","C:\\work\\blueone\\front\\components\\Login\\Layout\\index.tsx":"30","C:\\work\\blueone\\front\\components\\Login\\Layout\\styles.tsx":"31","C:\\work\\blueone\\front\\components\\User\\Layout\\index.tsx":"32","C:\\work\\blueone\\front\\components\\User\\Layout\\styles.tsx":"33","C:\\work\\blueone\\front\\components\\User\\Settings\\index.tsx":"34","C:\\work\\blueone\\front\\components\\User\\Settings\\parts.tsx":"35","C:\\work\\blueone\\front\\components\\User\\Settings\\PasswordChangeButton.tsx":"36","C:\\work\\blueone\\front\\components\\User\\Settings\\PasswordChangeForm.tsx":"37","C:\\work\\blueone\\front\\components\\User\\Settings\\styles.tsx":"38","C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\index.tsx":"39","C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\styles.tsx":"40","C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\WorkCard\\CheckButton.tsx":"41","C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\WorkCard\\DoneButton.tsx":"42","C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\WorkCard\\index.tsx":"43"},{"size":324,"mtime":1640890908315,"results":"44","hashOfConfig":"45"},{"size":656,"mtime":1640890910219,"results":"46","hashOfConfig":"45"},{"size":4187,"mtime":1640890911858,"results":"47","hashOfConfig":"45"},{"size":669,"mtime":1640899144101,"results":"48","hashOfConfig":"45"},{"size":965,"mtime":1640899165553,"results":"49","hashOfConfig":"45"},{"size":677,"mtime":1640899180058,"results":"50","hashOfConfig":"45"},{"size":461,"mtime":1640890903736,"results":"51","hashOfConfig":"45"},{"size":660,"mtime":1640768898112,"results":"52","hashOfConfig":"45"},{"size":1200,"mtime":1640899215372,"results":"53","hashOfConfig":"45"},{"size":3372,"mtime":1640899268998,"results":"54","hashOfConfig":"45"},{"size":2367,"mtime":1640899334265,"results":"55","hashOfConfig":"45"},{"size":1437,"mtime":1640899352762,"results":"56","hashOfConfig":"45"},{"size":4094,"mtime":1640899373190,"results":"57","hashOfConfig":"45"},{"size":948,"mtime":1640836149717,"results":"58","hashOfConfig":"45"},{"size":966,"mtime":1640792076294,"results":"59","hashOfConfig":"45"},{"size":2651,"mtime":1640901020955,"results":"60","hashOfConfig":"45"},{"size":3389,"mtime":1640870520953,"results":"61","hashOfConfig":"45"},{"size":184,"mtime":1640599869143,"results":"62","hashOfConfig":"45"},{"size":2392,"mtime":1640900018529,"results":"63","hashOfConfig":"45"},{"size":2325,"mtime":1640858606915,"results":"64","hashOfConfig":"45"},{"size":2329,"mtime":1640900070868,"results":"65","hashOfConfig":"45"},{"size":1382,"mtime":1640900084791,"results":"66","hashOfConfig":"45"},{"size":3776,"mtime":1640900111386,"results":"67","hashOfConfig":"45"},{"size":3020,"mtime":1640900163514,"results":"68","hashOfConfig":"45"},{"size":700,"mtime":1640777132080,"results":"69","hashOfConfig":"45"},{"size":3067,"mtime":1640836382879,"results":"70","hashOfConfig":"45"},{"size":166,"mtime":1640493867025,"results":"71","hashOfConfig":"45"},{"size":2008,"mtime":1640900176950,"results":"72","hashOfConfig":"45"},{"size":452,"mtime":1640888755992,"results":"73","hashOfConfig":"45"},{"size":372,"mtime":1640888869700,"results":"74","hashOfConfig":"45"},{"size":640,"mtime":1640888830431,"results":"75","hashOfConfig":"45"},{"size":1876,"mtime":1640891129044,"results":"76","hashOfConfig":"45"},{"size":1403,"mtime":1640891411441,"results":"77","hashOfConfig":"45"},{"size":970,"mtime":1640900210438,"results":"78","hashOfConfig":"45"},{"size":1288,"mtime":1640884138455,"results":"79","hashOfConfig":"45"},{"size":1370,"mtime":1640900223871,"results":"80","hashOfConfig":"45"},{"size":2558,"mtime":1640900338725,"results":"81","hashOfConfig":"45"},{"size":1085,"mtime":1640887845420,"results":"82","hashOfConfig":"45"},{"size":2197,"mtime":1640901085964,"results":"83","hashOfConfig":"45"},{"size":1222,"mtime":1640873739307,"results":"84","hashOfConfig":"45"},{"size":1611,"mtime":1640900756628,"results":"85","hashOfConfig":"45"},{"size":2364,"mtime":1640900837097,"results":"86","hashOfConfig":"45"},{"size":1873,"mtime":1640901253828,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tx49ix",{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":8,"source":"178"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\work\\blueone\\front\\pages\\index.tsx",[],"C:\\work\\blueone\\front\\pages\\login.tsx",[],"C:\\work\\blueone\\front\\pages\\temp.tsx",["189","190","191","192"],"import type { NextPage } from 'next';\nimport { useCallback } from 'react';\nimport type { FormEventHandler } from 'react';\nimport httpClient from '@utils/axios';\nimport type { EndPoint } from '@typings';\nimport useAdmin from '@hooks/useAdmin';\n\nconst textFields = [\n  'phoneNumber',\n  'realname',\n  'residentRegistrationNumber',\n  'licenseNumber',\n  'licenseType',\n  'insuranceNumber',\n];\n\nconst dateFields = ['insuranceExpirationDate'];\n\nconst TempUserCreatePage: NextPage = () => {\n  const { isAdminLoggedIn } = useAdmin({\n    redirectTo: '/login',\n  });\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = useCallback(async (e) => {\n    e.preventDefault();\n\n    const reqBody = Array.from(e.currentTarget.querySelectorAll('input')).reduce(\n      (acc, inputEl) => ({\n        ...acc,\n        [inputEl.name]: inputEl.value,\n      }),\n      {} as EndPoint['POST /users']['requestBody'],\n    );\n    try {\n      const createdUser = await httpClient\n        .post<EndPoint['POST /users']['responses']['202']>('/users', reqBody)\n        .then((res) => res.data);\n      console.log('createdUser', createdUser);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const handleAdminSubmit: FormEventHandler<HTMLFormElement> = useCallback(async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData(e.currentTarget);\n    try {\n      const admin = await httpClient\n        .post('/users/admin', {\n          phoneNumber: formData.get('phoneNumber'),\n        })\n        .then((res) => res.data);\n      console.log('admin 생성완료:', admin);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  if (!isAdminLoggedIn) return null;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        padding: '1rem',\n        border: '1px solid black',\n      }}\n    >\n      <div>\n        <h1>유저 생성</h1>\n        <form\n          action=\"\"\n          onSubmit={handleSubmit}\n          style={{\n            width: 'fit-content',\n            padding: '1.33rem',\n          }}\n        >\n          {textFields.map((field, i) => (\n            <div key={field + i}>\n              <label\n                htmlFor={field}\n                style={{\n                  width: '200px',\n                  display: 'inline-block',\n                  marginRight: '1rem',\n                  textAlign: 'right',\n                }}\n              >\n                {`${field}: `}\n              </label>\n              <input type=\"text\" id={field + i} name={field} required />\n            </div>\n          ))}\n          {dateFields.map((field, i) => (\n            <div key={field + i}>\n              <label\n                htmlFor={field}\n                style={{\n                  width: '200px',\n                  display: 'inline-block',\n                  marginRight: '1rem',\n                  textAlign: 'right',\n                }}\n              >\n                {`${field}: `}\n              </label>\n              <input type=\"date\" id={field + i} name={field} required />\n            </div>\n          ))}\n          <button\n            type=\"submit\"\n            style={{\n              marginTop: '1rem',\n              float: 'right',\n            }}\n          >\n            유저 생성\n          </button>\n        </form>\n      </div>\n      <div>\n        <h1>어드민 생성</h1>\n        <form\n          action=\"\"\n          onSubmit={handleAdminSubmit}\n          style={{\n            width: 'fit-content',\n            padding: '1.33rem',\n          }}\n        >\n          <div>\n            <label\n              htmlFor=\"phoneNumber\"\n              style={{\n                width: '200px',\n                display: 'inline-block',\n                marginRight: '1rem',\n                textAlign: 'right',\n              }}\n            >\n              phoneNumber:\n            </label>\n            <input type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" required />\n          </div>\n          <button\n            type=\"submit\"\n            style={{\n              marginTop: '1rem',\n              float: 'right',\n            }}\n          >\n            어드민 생성\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TempUserCreatePage;\n","C:\\work\\blueone\\front\\pages\\worker\\index.tsx",[],"C:\\work\\blueone\\front\\pages\\worker\\notice\\index.tsx",[],"C:\\work\\blueone\\front\\pages\\worker\\setting.tsx",[],"C:\\work\\blueone\\front\\pages\\_app.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\index.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\AddButton.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\AddForm.tsx",["193","194"],"import { Dispatch, SetStateAction, useCallback } from 'react';\nimport useSWRImmutable from 'swr/immutable';\nimport { Form, Input, FormProps, message, FormInstance } from 'antd';\nimport type { ColProps } from 'antd/lib/grid/col';\nimport httpClient from '@utils/axios';\nimport { axiosFetcher } from '@utils/swr';\nimport type { EndPoint } from '@typings';\nimport type { CreateRequestBody } from './AddButton';\n\ntype Props = {\n  form: FormInstance<CreateRequestBody>;\n  closeModal: () => void;\n  setSubmitLoading: Dispatch<SetStateAction<boolean>>;\n};\ntype Users = EndPoint['GET /users']['responses']['200'];\ntype CreatedUser = EndPoint['POST /users']['responses']['202'];\n\nconst layout: { [ColName: string]: ColProps } = {\n  labelCol: { span: 6 },\n  wrapperCol: { flex: 'auto' },\n};\n\nconst validateMessages: FormProps<CreateRequestBody>['validateMessages'] = {\n  required: '필수 입력 값입니다.',\n  pattern: {\n    mismatch: '형식이 올바르지 않습니다.',\n  },\n};\n\nconst WorkEditForm = ({ form, setSubmitLoading, closeModal }: Props) => {\n  const { data: users, mutate: mutateUsers } = useSWRImmutable<Users>('/users', axiosFetcher);\n\n  const onFormFinish: FormProps<CreateRequestBody>['onFinish'] = useCallback(\n    async (values) => {\n      setSubmitLoading(true);\n      try {\n        const createdUser = await httpClient.post<CreatedUser>('/users', values).then((res) => res.data);\n        const nextUsers = [createdUser, ...users!];\n        await mutateUsers(nextUsers);\n        message.success('기사 등록 완료');\n        closeModal();\n      } catch (err) {\n        message.error('기사 등록 중 에러 발생, 개발자에게 문의하세요.');\n        console.error(err);\n      }\n      setSubmitLoading(false);\n    },\n    [users, closeModal, mutateUsers, setSubmitLoading],\n  );\n\n  return (\n    <Form form={form} onFinish={onFormFinish} validateMessages={validateMessages} size=\"middle\" {...layout}>\n      <Form.Item\n        name=\"phoneNumber\"\n        label=\"전화번호\"\n        rules={[{ required: true, pattern: /\\d+/ }]}\n        tooltip=\"ex) 01012340000\"\n      >\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"realname\" label=\"실명\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item\n        name=\"residentRegistrationNumber\"\n        label=\"주민등록번호\"\n        rules={[{ required: true, pattern: /[\\d-]+/ }]}\n        tooltip=\"ex) 800101-1000000\"\n      >\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"licenseType\" label=\"면허 종류\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item\n        name=\"licenseNumber\"\n        label=\"면허 번호\"\n        rules={[{ required: true, pattern: /[\\d-]+/ }]}\n        tooltip=\"ex) 12-000000-34\"\n      >\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item\n        name=\"insuranceNumber\"\n        label=\"보험 번호\"\n        rules={[{ required: true, pattern: /[\\d-]+/ }]}\n        tooltip=\"ex) 1-1234-0000000-000\"\n      >\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"insuranceExpirationDate\" label=\"보험 만료일\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" type=\"date\" />\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default WorkEditForm;\n","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\DeleteButton.tsx",["195","196"],"import { ReactNode, useCallback, useState } from 'react';\nimport useSWRImmutable from 'swr/immutable';\nimport { Button, message, Popconfirm, Tooltip } from 'antd';\nimport { DeleteOutlined, LoadingOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport httpClient from '@utils/axios';\nimport { axiosFetcher } from '@utils/swr';\nimport type { EndPoint } from '@typings';\nimport type { FullUsers, FullUser } from './index';\n\ntype Props = {\n  user: FullUser;\n};\ntype DeletedUser = EndPoint['DELETE /users/{userId}']['responses']['200'];\n\nconst Spinner = <LoadingOutlined style={{ fontSize: 12 }} spin />;\n\nconst DeleteButton = ({ user }: Props) => {\n  const INITIAL_POPOVER_TEXT = '기사 정보 삭제';\n  const { data: users, mutate: mutateUsers } = useSWRImmutable<FullUsers>('/users', axiosFetcher);\n  const [isPopoverOpen, setIsPopoverOpen] = useState<boolean>(false);\n  const [popoverText, setPopoverText] = useState<ReactNode>(INITIAL_POPOVER_TEXT);\n\n  const showPopconfirm = () => {\n    setIsPopoverOpen(true);\n  };\n\n  const deleteWork = useCallback(async () => {\n    setPopoverText(Spinner);\n\n    try {\n      const deletedUser = await httpClient.delete<DeletedUser>(`/users/${user.id}`).then((res) => res.data);\n      const nextUsers = users!.filter((prevUser) => prevUser.id !== deletedUser.id);\n      await mutateUsers(nextUsers);\n      message.success('기사 정보 삭제 완료');\n    } catch (err) {\n      message.error('기사 정보 삭제 중 에러 발생, 개발자에게 문의하세요.');\n      console.error(err);\n    }\n\n    setIsPopoverOpen(false);\n    setPopoverText(INITIAL_POPOVER_TEXT);\n  }, [users, user, mutateUsers]);\n\n  const handleCancel = () => {\n    setIsPopoverOpen(false);\n  };\n\n  return (\n    <>\n      <Popconfirm\n        title={popoverText}\n        visible={isPopoverOpen}\n        onConfirm={deleteWork}\n        okText=\"삭제\"\n        okButtonProps={{ danger: true }}\n        onCancel={handleCancel}\n        cancelText=\"취소\"\n        icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n      >\n        <Tooltip title=\"삭제\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<DeleteOutlined />}\n            style={{ color: '#ff4d4f' }}\n            onClick={showPopconfirm}\n          />\n        </Tooltip>\n      </Popconfirm>\n    </>\n  );\n};\n\nexport default DeleteButton;\n","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\EditButton.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\EditForm.tsx",["197","198","199"],"import { Dispatch, SetStateAction, useCallback, useMemo } from 'react';\nimport useSWRImmutable from 'swr/immutable';\nimport { Form, Input, FormProps, message, FormInstance } from 'antd';\nimport type { ColProps } from 'antd/lib/grid/col';\nimport httpClient from '@utils/axios';\nimport { axiosFetcher } from '@utils/swr';\nimport type { EndPoint } from '@typings';\nimport type { FullUser } from './index';\nimport type { UpdateRequestBody } from './EditButton';\n\ntype Props = {\n  form: FormInstance<UpdateRequestBody>;\n  prevUser: FullUser;\n  closeModal: () => void;\n  setSubmitLoading: Dispatch<SetStateAction<boolean>>;\n};\ntype Users = EndPoint['GET /users']['responses']['200'];\ntype UpdatedUser = EndPoint['PUT /users/{userId}']['responses']['200'];\n\nconst layout: { [ColName: string]: ColProps } = {\n  labelCol: { span: 6 },\n  wrapperCol: { flex: 'auto' },\n};\n\nconst validateMessages: FormProps<UpdateRequestBody>['validateMessages'] = {\n  required: '필수 입력 값입니다.',\n  pattern: {\n    mismatch: '형식이 올바르지 않습니다.',\n  },\n};\n\nconst WorkEditForm = ({ form, prevUser, setSubmitLoading, closeModal }: Props) => {\n  const { data: users, mutate: mutateUsers } = useSWRImmutable<Users>('/users', axiosFetcher);\n  const {\n    phoneNumber,\n    UserInfo: {\n      realname,\n      residentRegistrationNumber,\n      licenseNumber,\n      licenseType,\n      insuranceNumber,\n      insuranceExpirationDate,\n    },\n  } = prevUser;\n  const formInitialValues = useMemo<UpdateRequestBody>(\n    () => ({\n      phoneNumber,\n      realname,\n      residentRegistrationNumber,\n      licenseNumber,\n      licenseType,\n      insuranceNumber,\n      insuranceExpirationDate,\n    }),\n    [prevUser],\n  );\n\n  const onFormFinish: FormProps<UpdateRequestBody>['onFinish'] = useCallback(\n    async (values) => {\n      setSubmitLoading(true);\n      try {\n        const updatedUser = await httpClient.put<UpdatedUser>(`/users/${prevUser.id}`, values).then((res) => res.data);\n        const nextUsers = users!.map((user) => (user.id !== updatedUser.id ? user : updatedUser));\n        await mutateUsers(nextUsers);\n        message.success('기사 정보 수정 완료');\n        closeModal();\n      } catch (err) {\n        message.error('기사 정보 수정 중 에러 발생, 개발자에게 문의하세요.');\n        console.error(err);\n      }\n      setSubmitLoading(false);\n    },\n    [prevUser, users, closeModal, mutateUsers, setSubmitLoading],\n  );\n\n  return (\n    <Form\n      form={form}\n      initialValues={formInitialValues}\n      onFinish={onFormFinish}\n      validateMessages={validateMessages}\n      size=\"middle\"\n      {...layout}\n    >\n      <Form.Item\n        name=\"phoneNumber\"\n        label=\"전화번호\"\n        rules={[{ required: true, pattern: /\\d+/ }]}\n        tooltip=\"ex) 01012340000\"\n      >\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"realname\" label=\"실명\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item\n        name=\"residentRegistrationNumber\"\n        label=\"주민등록번호\"\n        rules={[{ required: true, pattern: /[\\d-]+/ }]}\n        tooltip=\"ex) 800101-1000000\"\n      >\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"licenseType\" label=\"면허 종류\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item\n        name=\"licenseNumber\"\n        label=\"면허 번호\"\n        rules={[{ required: true, pattern: /[\\d-]+/ }]}\n        tooltip=\"ex) 12-000000-34\"\n      >\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item\n        name=\"insuranceNumber\"\n        label=\"보험 번호\"\n        rules={[{ required: true, pattern: /[\\d-]+/ }]}\n        tooltip=\"ex) 1-1234-0000000-000\"\n      >\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"insuranceExpirationDate\" label=\"보험 만료일\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" type=\"date\" />\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default WorkEditForm;\n","C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\index.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\UserList\\UserItem.tsx",["200","201"],"import dayjs from 'dayjs';\nimport 'dayjs/locale/ko';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { Avatar, List, Tooltip } from 'antd';\nimport { UserOutlined, WarningOutlined } from '@ant-design/icons';\nimport processPhoneNumber from '@utils/processPhoneNumber';\nimport EditButton from './EditButton';\nimport DeleteButton from './DeleteButton';\nimport type { FullUser } from './index';\nimport * as S from './styles';\n\ndayjs.locale('ko');\ndayjs.extend(relativeTime);\nconst { Item } = List;\n\nconst UserItem = (user: FullUser) => {\n  const {\n    id,\n    phoneNumber,\n    UserInfo: { realname, insuranceExpirationDate },\n  } = user;\n\n  const now = dayjs();\n  const DAY = 24 * 60 * 60 * 1000;\n  const isValidInsurance = now.isBefore(insuranceExpirationDate, 'day');\n  const isImminentExpiredAt = !isValidInsurance ? false : dayjs(insuranceExpirationDate).diff(now, 'ms') < 7 * DAY;\n  const expiredAtFromNow = () => now.to(insuranceExpirationDate);\n\n  return (\n    <S.StyledItem\n      actions={[\n        <EditButton user={user} key={`editButton_${id}`} />,\n        <DeleteButton user={user} key={`deleteButton_${id}`} />,\n      ]}\n    >\n      <Item.Meta\n        avatar={\n          <Avatar\n            icon={<UserOutlined />}\n            style={{ backgroundColor: `${isValidInsurance ? (!isImminentExpiredAt ? '#ccc' : '#eed202') : '#ff4d4f'}` }}\n          />\n        }\n        title={\n          isValidInsurance ? (\n            !isImminentExpiredAt ? (\n              <span>{realname}</span>\n            ) : (\n              <>\n                <span>{realname}</span>\n                &lt;\n                <Tooltip title=\"보험 만료가 얼마 남지 않았습니다.\">\n                  <WarningOutlined style={{ color: '#eed202', verticalAlign: 'text-top' }} />\n                </Tooltip>\n              </>\n            )\n          ) : (\n            <>\n              <span style={{ textDecoration: 'line-through' }}>{realname}</span>\n              &lt;\n              <Tooltip title=\"보험이 만료되었습니다.\">\n                <WarningOutlined style={{ color: '#ff4d4f', verticalAlign: 'text-top' }} />\n              </Tooltip>\n            </>\n          )\n        }\n        description={\n          <div style={{ textDecoration: `${isValidInsurance ? 'initial' : 'line-through'}` }}>\n            <p>{processPhoneNumber(phoneNumber)}</p>\n            <p>\n              {isValidInsurance\n                ? `보험 만료일: ${insuranceExpirationDate} (${expiredAtFromNow()})`\n                : '보험이 만료되었습니다'}\n            </p>\n          </div>\n        }\n      />\n    </S.StyledItem>\n  );\n};\n\nexport default UserItem;\n","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkAddForm\\index.tsx",["202"],"import { useCallback } from 'react';\nimport { Form, Input, InputNumber, Button, FormProps, message } from 'antd';\nimport type { ColProps } from 'antd/lib/grid/col';\nimport httpClient from '@utils/axios';\nimport type { EndPoint } from '@typings';\nimport UserSelecter from './UserSelecter';\nimport * as S from './styles';\n\ntype RequestBody = EndPoint['POST /works']['requestBody'];\ntype Response = EndPoint['POST /works']['responses']['201'];\nexport type Fields = Omit<RequestBody, 'UserId' | 'waypoint' | 'remark'> & {\n  UserId?: RequestBody['UserId'];\n  waypoint?: RequestBody['waypoint'];\n  remark?: RequestBody['remark'];\n};\n\nconst layout: { [ColName: string]: ColProps } = {\n  labelCol: { span: 5 },\n  wrapperCol: { flex: 'auto' },\n};\nconst submitButtonWrapperCol: ColProps = { flex: 'auto' };\n\nconst validateMessages = {\n  required: '필수 입력 값입니다.',\n  types: {\n    number: '숫자 형식이여야 합니다.',\n  },\n  number: {\n    min: '${min}보다 커야합니다.',\n  },\n};\n\nconst WorkAddForm = () => {\n  const [form] = Form.useForm<Fields>();\n\n  const onFormFinish: FormProps<Fields>['onFinish'] = useCallback(\n    async (values) => {\n      const reqBody: RequestBody = {\n        ...values,\n        waypoint: values.waypoint ?? null,\n        UserId: values.UserId ?? null,\n        remark: values.remark ?? null,\n      };\n\n      try {\n        await httpClient.post<Response>('/works', reqBody);\n        message.success('작업 추가 완료');\n        form.resetFields();\n      } catch (err) {\n        message.error('작업 추가 중 에러 발생, 개발자에게 문의하세요.');\n        console.error(err);\n      }\n    },\n    [form],\n  );\n\n  return (\n    <S.FormWrapper>\n      <Form {...layout} form={form} onFinish={onFormFinish} validateMessages={validateMessages} size=\"middle\">\n        <Form.Item name=\"UserId\" label=\"기사\" tooltip=\"나중에 추가할 수도 있습니다.\">\n          <UserSelecter form={form} />\n        </Form.Item>\n        <Form.Item name=\"origin\" label=\"출발지\" rules={[{ required: true }]}>\n          <Input autoComplete=\"off\" />\n        </Form.Item>\n        <Form.Item name=\"waypoint\" label=\"경유지\">\n          <Input autoComplete=\"off\" />\n        </Form.Item>\n        <Form.Item name=\"destination\" label=\"도착지\" rules={[{ required: true }]}>\n          <Input autoComplete=\"off\" />\n        </Form.Item>\n        <Form.Item name=\"carModel\" label=\"차종\" rules={[{ required: true }]}>\n          <Input autoComplete=\"off\" />\n        </Form.Item>\n        <Form.Item\n          name=\"charge\"\n          label=\"구간지수\"\n          tooltip=\"단위: 1000\"\n          rules={[{ type: 'number', min: 0, required: true }]}\n        >\n          <InputNumber autoComplete=\"off\" />\n        </Form.Item>\n        <Form.Item\n          name=\"subsidy\"\n          label=\"지원지수\"\n          tooltip=\"단위: 1000\"\n          rules={[{ type: 'number', min: 0, required: true }]}\n        >\n          <InputNumber autoComplete=\"off\" />\n        </Form.Item>\n        <Form.Item name=\"remark\" label=\"비고\">\n          <Input.TextArea autoComplete=\"off\" />\n        </Form.Item>\n        <Form.Item wrapperCol={submitButtonWrapperCol}>\n          <Button type=\"primary\" htmlType=\"submit\" block size=\"middle\">\n            작성 완료\n          </Button>\n        </Form.Item>\n      </Form>\n    </S.FormWrapper>\n  );\n};\n\nexport default WorkAddForm;\n","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkAddForm\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\WorkAddForm\\UserSelecter.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\columns.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\DeleteButton.tsx",["203","204"],"import { ReactNode, useCallback, useState } from 'react';\nimport useSWRImmutable from 'swr/immutable';\nimport { Button, message, Popconfirm, Tooltip } from 'antd';\nimport { DeleteOutlined, LoadingOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport httpClient from '@utils/axios';\nimport { axiosFetcher } from '@utils/swr';\nimport type { EndPoint } from '@typings';\nimport type { FullWorks, ProcessedWork } from './index';\n\ntype Props = {\n  record: ProcessedWork;\n};\ntype Response = EndPoint['DELETE /works/{workId}']['responses']['200'];\n\nconst Spinner = <LoadingOutlined style={{ fontSize: 12 }} spin />;\n\nconst DeleteButton = ({ record }: Props) => {\n  const INITIAL_POPOVER_TEXT = '업무 삭제';\n  const { data: works, mutate: mutateWorks } = useSWRImmutable<FullWorks>('/works', axiosFetcher);\n  const [isPopoverOpen, setIsPopoverOpen] = useState<boolean>(false);\n  const [popoverText, setPopoverText] = useState<ReactNode>(INITIAL_POPOVER_TEXT);\n\n  const showPopconfirm = () => {\n    setIsPopoverOpen(true);\n  };\n\n  const deleteWork = useCallback(async () => {\n    setPopoverText(Spinner);\n\n    try {\n      await httpClient.delete<Response>(`/works/${record.id}`);\n      const nextWorks = works!.filter((work) => work.id !== record.id);\n      await mutateWorks(nextWorks);\n      message.success('작업 삭제 완료');\n    } catch (err) {\n      message.error('작업 삭제 중 에러 발생, 개발자에게 문의하세요.');\n      console.error(err);\n    }\n\n    setIsPopoverOpen(false);\n    setPopoverText(INITIAL_POPOVER_TEXT);\n  }, [works, record, mutateWorks]);\n\n  const handleCancel = () => {\n    setIsPopoverOpen(false);\n  };\n\n  return (\n    <>\n      <Popconfirm\n        title={popoverText}\n        visible={isPopoverOpen}\n        onConfirm={deleteWork}\n        okText=\"삭제\"\n        okButtonProps={{ danger: true }}\n        onCancel={handleCancel}\n        cancelText=\"취소\"\n        icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n      >\n        <Tooltip title=\"삭제\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<DeleteOutlined />}\n            style={{ color: record.isDone ? '#7C3A38' : '#ff4d4f' }}\n            onClick={showPopconfirm}\n          />\n        </Tooltip>\n      </Popconfirm>\n    </>\n  );\n};\n\nexport default DeleteButton;\n","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\EditButton.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\EditForm.tsx",["205","206"],"import { Dispatch, SetStateAction, useCallback } from 'react';\nimport useSWRImmutable from 'swr/immutable';\nimport { Form, Input, InputNumber, FormProps, message, FormInstance } from 'antd';\nimport type { ColProps } from 'antd/lib/grid/col';\nimport UserSelecter from '@components/Admin/content/WorkAddForm/UserSelecter';\nimport httpClient from '@utils/axios';\nimport { axiosFetcher } from '@utils/swr';\nimport type { Fields } from '@components/Admin/content/WorkAddForm';\nimport type { EndPoint } from '@typings';\nimport type { FullWorks, ProcessedWork } from './index';\n\ntype Props = {\n  form: FormInstance<Fields>;\n  prevWork: ProcessedWork;\n  closeModal: () => void;\n  setSubmitLoading: Dispatch<SetStateAction<boolean>>;\n};\ntype RequestBody = EndPoint['PUT /works/{workId}']['requestBody'];\ntype Response = EndPoint['PUT /works/{workId}']['responses']['200'];\n\nconst layout: { [ColName: string]: ColProps } = {\n  labelCol: { span: 5 },\n  wrapperCol: { flex: 'auto' },\n};\n\nconst validateMessages = {\n  required: '필수 입력 값입니다.',\n  types: {\n    number: '숫자 형식이여야 합니다.',\n  },\n  number: {\n    min: '${min}보다 커야합니다.',\n  },\n};\n\nconst WorkEditForm = ({ form, prevWork, setSubmitLoading, closeModal }: Props) => {\n  const { data: works, mutate: mutateWorks } = useSWRImmutable<FullWorks>('/works', axiosFetcher);\n\n  const onFormFinish: FormProps<Fields>['onFinish'] = useCallback(\n    async (values) => {\n      const reqBody: RequestBody = {\n        ...values,\n        waypoint: values.waypoint ?? null,\n        UserId: values.UserId ?? null,\n        remark: values.remark ?? null,\n      };\n\n      setSubmitLoading(true);\n      try {\n        const updatedWork = await httpClient.put<Response>(`/works/${prevWork.id}`, reqBody).then((res) => res.data);\n        const nextWorks = works!.map((work) => (work.id !== updatedWork.id ? work : updatedWork));\n        await mutateWorks(nextWorks);\n        message.success('작업 수정 완료');\n        closeModal();\n      } catch (err) {\n        message.error('작업 수정 중 에러 발생, 개발자에게 문의하세요.');\n        console.error(err);\n      }\n      setSubmitLoading(false);\n    },\n    [works, prevWork, closeModal, mutateWorks, setSubmitLoading],\n  );\n\n  return (\n    <Form\n      form={form}\n      initialValues={prevWork}\n      onFinish={onFormFinish}\n      validateMessages={validateMessages}\n      size=\"middle\"\n      {...layout}\n    >\n      <Form.Item name=\"UserId\" label=\"기사\" tooltip=\"나중에 추가할 수도 있습니다.\">\n        <UserSelecter form={form} defaultUserId={prevWork.UserId} />\n      </Form.Item>\n      <Form.Item name=\"origin\" label=\"출발지\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"waypoint\" label=\"경유지\">\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"destination\" label=\"도착지\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"carModel\" label=\"차종\" rules={[{ required: true }]}>\n        <Input autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item\n        name=\"charge\"\n        label=\"구간지수\"\n        tooltip=\"단위: 1000\"\n        rules={[{ type: 'number', min: 0, required: true }]}\n      >\n        <InputNumber autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item\n        name=\"subsidy\"\n        label=\"지원지수\"\n        tooltip=\"단위: 1000\"\n        rules={[{ type: 'number', min: 0, required: true }]}\n      >\n        <InputNumber autoComplete=\"off\" />\n      </Form.Item>\n      <Form.Item name=\"remark\" label=\"비고\">\n        <Input.TextArea autoComplete=\"off\" />\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default WorkEditForm;\n","C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\index.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\content\\WorkTable\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\Layout\\index.tsx",[],"C:\\work\\blueone\\front\\components\\Admin\\Layout\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\Login\\Form\\index.tsx",["207"],"import { useRouter } from 'next/router';\nimport { Input, Form, Button, FormProps, message } from 'antd';\nimport { ColProps } from 'antd/lib/grid/col';\nimport httpClient from '@utils/axios';\nimport type { AxiosError } from 'axios';\nimport type { EndPoint } from '@typings';\nimport * as S from './styles';\n\ntype RequestBody = EndPoint['POST /user/login']['requestBody'];\ntype Responses = EndPoint['POST /user/login']['responses'];\n\nconst layout: { [ColName: string]: ColProps } = {\n  labelCol: { span: 5 },\n  wrapperCol: { flex: 'auto' },\n};\n\nconst LoginForm = () => {\n  const router = useRouter();\n\n  const onFinish: FormProps<RequestBody>['onFinish'] = async (values) => {\n    try {\n      const user = await httpClient.post<Responses['200']>('/user/login', values).then((res) => res.data);\n\n      switch (user.role) {\n        case 'admin':\n          router.push('/');\n          break;\n        case 'user':\n          router.push('worker');\n          break;\n        default:\n      }\n    } catch (err) {\n      const errorMessage = (err as AxiosError).response?.data.message;\n      message.error(errorMessage);\n      console.error(errorMessage);\n    }\n  };\n\n  return (\n    <Form name=\"login-form\" initialValues={{ remember: true }} onFinish={onFinish} autoComplete=\"off\" {...layout}>\n      <S.InputFormItem\n        label=\"전화번호\"\n        name=\"phoneNumber\"\n        rules={[{ required: true, message: '전화번호를 입력해주세요' }]}\n      >\n        <S.NumericInput type=\"number\" autoComplete=\"off\" size=\"large\" />\n      </S.InputFormItem>\n\n      <S.InputFormItem\n        label=\"비밀번호\"\n        name=\"password\"\n        rules={[{ required: true, message: '비밀번호를 입력해주세요' }]}\n      >\n        <Input.Password autoComplete=\"off\" size=\"large\" />\n      </S.InputFormItem>\n\n      <S.ButtonFormItem>\n        <Button type=\"primary\" htmlType=\"submit\" size=\"large\" block>\n          로그인\n        </Button>\n      </S.ButtonFormItem>\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","C:\\work\\blueone\\front\\components\\Login\\Form\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\Login\\Layout\\index.tsx",[],"C:\\work\\blueone\\front\\components\\Login\\Layout\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\User\\Layout\\index.tsx",["208"],"import { useMemo, FC, ReactNode } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport {\n  AiFillCar,\n  AiFillNotification,\n  AiFillSetting,\n  AiOutlineCar,\n  AiOutlineNotification,\n  AiOutlineSetting,\n} from 'react-icons/ai';\nimport * as S from './styles';\n\ntype NavItem = {\n  href: `/${string}`;\n  outlineIcon: ReactNode;\n  fillIcon: ReactNode;\n  text: string;\n};\nconst navItems: NavItem[] = [\n  {\n    href: '/worker',\n    outlineIcon: <AiOutlineCar size={20} />,\n    fillIcon: <AiFillCar size={20} />,\n    text: '업무',\n  },\n  {\n    href: '/worker/notice',\n    outlineIcon: <AiOutlineNotification size={20} />,\n    fillIcon: <AiFillNotification size={20} />,\n    text: '공지사항',\n  },\n  {\n    href: '/worker/setting',\n    outlineIcon: <AiOutlineSetting size={20} />,\n    fillIcon: <AiFillSetting size={20} />,\n    text: '설정',\n  },\n];\n\nconst ActiveLink: FC<{ active: boolean; item: NavItem }> = ({ item, active }) => (\n  <Link href={item.href} passHref>\n    <S.ActiveAnchor active={active}>\n      {active ? item.fillIcon : item.outlineIcon}\n      <p>{item.text}</p>\n    </S.ActiveAnchor>\n  </Link>\n);\n\nconst UserLayout: FC<{ bodyNoPadding?: boolean }> = ({ children, bodyNoPadding }) => {\n  const router = useRouter();\n\n  const headerText = useMemo(() => navItems.find((item) => item.href === router.asPath)!.text, [router.asPath]);\n\n  return (\n    <S.CenterLayout>\n      <S.Box>\n        <S.BoxHeader>\n          <h1>{headerText}</h1>\n        </S.BoxHeader>\n        <S.BoxMain noPadding={bodyNoPadding}>{children}</S.BoxMain>\n        <S.BoxFooter>\n          <nav>\n            {navItems.map((item) => (\n              <ActiveLink key={item.href} item={item} active={item.href === router.asPath} />\n            ))}\n          </nav>\n        </S.BoxFooter>\n      </S.Box>\n    </S.CenterLayout>\n  );\n};\n\nexport default UserLayout;\n","C:\\work\\blueone\\front\\components\\User\\Layout\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\User\\Settings\\index.tsx",[],"C:\\work\\blueone\\front\\components\\User\\Settings\\parts.tsx",[],"C:\\work\\blueone\\front\\components\\User\\Settings\\PasswordChangeButton.tsx",["209"],"import { MouseEventHandler, FC, useCallback, useState } from 'react';\nimport { Button, Form, Modal } from 'antd';\nimport type { EndPoint } from '@typings';\nimport PasswordChangeForm from './PasswordChangeForm';\n\ntype RequestBody = EndPoint['POST /user/password']['requestBody'];\n\nconst PasswordChangeButton: FC = () => {\n  const [form] = Form.useForm<RequestBody>();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const closeModal = useCallback(() => {\n    form.resetFields();\n    setIsModalOpen(false);\n  }, []);\n\n  const handleButtonClick: MouseEventHandler<HTMLElement> = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n\n  return (\n    <>\n      <Button type=\"text\" onClick={handleButtonClick} style={{ textAlign: 'start', padding: 0 }} block>\n        비밀번호 변경\n      </Button>\n      <Modal\n        title=\"비밀번호 변경\"\n        visible={isModalOpen}\n        onOk={form.submit}\n        onCancel={closeModal}\n        okText=\"변경하기\"\n        cancelText=\"취소\"\n        confirmLoading={loading}\n        style={{\n          top: '50%',\n          transform: 'translateY(-50%)',\n        }}\n      >\n        <PasswordChangeForm form={form} closeModal={closeModal} setSubmitLoading={setLoading} />\n      </Modal>\n    </>\n  );\n};\n\nexport default PasswordChangeButton;\n","C:\\work\\blueone\\front\\components\\User\\Settings\\PasswordChangeForm.tsx",["210","211"],"import { Dispatch, SetStateAction, useCallback } from 'react';\nimport useSWRImmutable from 'swr/immutable';\nimport { Form, Input, FormProps, message, FormInstance } from 'antd';\nimport type { ColProps } from 'antd/lib/grid/col';\nimport httpClient from '@utils/axios';\nimport { axiosFetcher } from '@utils/swr';\nimport type { EndPoint } from '@typings';\n\ntype User = EndPoint['GET /user']['responses']['200'];\ntype RequestBody = EndPoint['POST /user/password']['requestBody'];\ntype Response = EndPoint['POST /user/password']['responses']['204'];\ntype Props = {\n  form: FormInstance<RequestBody>;\n  closeModal: () => void;\n  setSubmitLoading: Dispatch<SetStateAction<boolean>>;\n};\n\nconst layout: { [ColName: string]: ColProps } = {\n  labelCol: { span: 4 },\n  wrapperCol: { flex: 'auto' },\n};\n\nconst validateMessages = {\n  required: '필수 입력 값입니다.',\n};\n\nconst PasswordChangeForm = ({ form, setSubmitLoading, closeModal }: Props) => {\n  const { data: user } = useSWRImmutable<User>('/user', axiosFetcher);\n\n  const onFormFinish: FormProps<RequestBody>['onFinish'] = useCallback(\n    async (values) => {\n      const reqBody: RequestBody = {\n        password: values.password,\n      };\n\n      setSubmitLoading(true);\n      try {\n        await httpClient.post<Response>('/user/password', reqBody).then((res) => res.data);\n        closeModal();\n        message.success('비밀번호가 변경되었어요.');\n      } catch (err) {\n        message.error('서버에 문제가 있는 것 같아요! 사장님에게 문의해주세요.');\n        console.error(err);\n      }\n      setSubmitLoading(false);\n    },\n    [user, closeModal, setSubmitLoading],\n  );\n\n  return (\n    <Form form={form} onFinish={onFormFinish} validateMessages={validateMessages} size=\"middle\" {...layout}>\n      <Form.Item name=\"password\" label=\"새 비밀번호\" rules={[{ required: true }]}>\n        <Input.Password autoComplete=\"off\" />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"비밀번호 확인\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          { required: true },\n          ({ getFieldValue }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(new Error('비밀번호가 일치하지 않습니다.'));\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default PasswordChangeForm;\n","C:\\work\\blueone\\front\\components\\User\\Settings\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\index.tsx",["212","213","214","215","216","217","218","219","220"],"import { useCallback, useEffect, useMemo, useRef } from 'react';\nimport useSWR from 'swr';\nimport { Card, Carousel, Empty, message } from 'antd';\nimport { Global } from '@emotion/react';\nimport { axiosFetcher } from '@utils/swr';\nimport type { EndPoint } from '@typings';\nimport type { Settings } from '@ant-design/react-slick';\nimport WorkCard from './WorkCard';\nimport * as S from './styles';\n\nexport type MyWorks = EndPoint['GET /user/works']['responses']['200'];\n\nconst EmptyWork = () => (\n  <S.StyledEmpty\n    image={Empty.PRESENTED_IMAGE_SIMPLE}\n    imageStyle={{\n      height: 60,\n    }}\n    description=\"아직 배정된 업무가 없어요 :)\"\n  />\n);\n\nconst WorkCarousel = () => {\n  const { data: myWorks } = useSWR<MyWorks>('/user/works', axiosFetcher, {\n    refreshInterval: 60 * 1000,\n  });\n  const prevWorkCount = useRef<number | undefined>(myWorks?.length);\n  const localStorage = useMemo(\n    () =>\n      typeof window !== 'undefined'\n        ? window.localStorage\n        : {\n            setItem() {\n              return null;\n            },\n            getItem() {\n              return '0';\n            },\n          },\n    [typeof window],\n  );\n  const initialSlide = Number(localStorage.getItem('currSlide'));\n\n  const afterChange: Settings['afterChange'] = useCallback(\n    (currSlide) => {\n      localStorage.setItem('currSlide', currSlide.toString());\n    },\n    [localStorage],\n  );\n\n  useEffect(() => {\n    if (!prevWorkCount.current) return;\n\n    const currWorkCount = myWorks?.length ?? 0;\n    if (currWorkCount > prevWorkCount.current) {\n      message.info('새로운 업무가 추가됐어요!');\n    }\n    prevWorkCount.current = currWorkCount;\n  }, [myWorks, prevWorkCount]);\n\n  if (!myWorks) {\n    return <Card loading />;\n  }\n  if (myWorks.length === 0) {\n    return <EmptyWork />;\n  }\n  return (\n    <>\n      <Global styles={S.globalCSS} />\n      <Carousel\n        dotPosition=\"top\"\n        infinite\n        initialSlide={myWorks[initialSlide] ? initialSlide : 0}\n        afterChange={afterChange}\n      >\n        {myWorks.map((work) => (\n          <WorkCard work={work} key={work.id} />\n        ))}\n      </Carousel>\n    </>\n  );\n};\n\nexport default WorkCarousel;\n","C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\styles.tsx",[],"C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\WorkCard\\CheckButton.tsx",["221"],"import { FC, MouseEventHandler, useCallback, useState } from 'react';\nimport { Button, message } from 'antd';\nimport httpClient from '@utils/axios';\nimport useSWRImmutable from 'swr/immutable';\nimport { axiosFetcher } from '@utils/swr';\nimport type { EndPoint, Work } from '@typings';\nimport type { MyWorks } from '@components/User/WorkCarousel';\n\ntype Props = {\n  workId: Work['id'];\n  isWorkChecked: boolean;\n};\ntype PatchedWork = EndPoint['PATCH /works/{workId}']['responses']['200'];\n\nconst CheckButton: FC<Props> = ({ workId, isWorkChecked }) => {\n  const { data: works, mutate: mutateWorks } = useSWRImmutable<MyWorks>('/user/works', axiosFetcher);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handleClick: MouseEventHandler<HTMLButtonElement> = useCallback(async () => {\n    setLoading(true);\n    try {\n      const patchedWork = await httpClient.patch<PatchedWork>(`/works/${workId}?state=checked`).then((res) => res.data);\n      const nextWorks = works?.map((work) => (work.id !== patchedWork.id ? work : patchedWork));\n      setLoading(false);\n      await mutateWorks(nextWorks);\n      message.success('업무 확인 완료');\n    } catch (err) {\n      setLoading(false);\n      message.error('서버에 문제가 있는 것 같아요! 사장님에게 문의해주세요.');\n      console.error(err);\n    }\n  }, [works, workId, mutateWorks]);\n\n  return (\n    <Button\n      type={isWorkChecked ? 'ghost' : 'primary'}\n      disabled={isWorkChecked}\n      onClick={handleClick}\n      loading={loading}\n      block\n    >\n      확인\n    </Button>\n  );\n};\n\nexport default CheckButton;\n","C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\WorkCard\\DoneButton.tsx",["222"],"import { MouseEventHandler, FC, useCallback, useState } from 'react';\nimport useSWRImmutable from 'swr/immutable';\nimport { Button, message, Modal } from 'antd';\nimport type { Work, EndPoint } from '@typings';\nimport { axiosFetcher } from '@utils/swr';\nimport httpClient from '@utils/axios';\n\ntype Props = {\n  workId: Work['id'];\n  isWorkChecked: boolean;\n};\ntype MyWorks = EndPoint['GET /user/works']['responses']['200'];\ntype PatchedWork = EndPoint['PATCH /works/{workId}']['responses']['200'];\n\nconst DoneButton: FC<Props> = ({ workId, isWorkChecked }) => {\n  const { data: works, mutate: mutateWorks } = useSWRImmutable<MyWorks>('/user/works', axiosFetcher);\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const deleteWork = useCallback(async () => {\n    if (!isWorkChecked) {\n      message.warn('확인 처리되지 않은 업무는 완료할 수 없어요.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const patchedWork = await httpClient.patch<PatchedWork>(`/works/${workId}?state=done`).then((res) => res.data);\n      const nextWorks = works?.map((work) => (work.id !== patchedWork.id ? work : patchedWork));\n      setLoading(false);\n      setIsModalOpen(false);\n      await mutateWorks(nextWorks);\n      message.success('작업이 완료 처리 되었어요. 고생하셨습니다 :)');\n    } catch (err) {\n      setLoading(false);\n      message.error('서버에 문제가 있는 것 같아요! 사장님에게 문의해주세요.');\n      console.error(err);\n    }\n  }, [works, workId, isWorkChecked, mutateWorks]);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  const handleButtonClick: MouseEventHandler<HTMLElement> = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n\n  return (\n    <>\n      <Button type={isWorkChecked ? 'primary' : 'ghost'} disabled={!isWorkChecked} onClick={handleButtonClick} block>\n        완료\n      </Button>\n      <Modal\n        visible={isModalOpen}\n        onOk={deleteWork}\n        onCancel={closeModal}\n        okText=\"완료\"\n        cancelText=\"취소\"\n        confirmLoading={loading}\n        style={{\n          top: '50%',\n          transform: 'translateY(-50%)',\n        }}\n      >\n        작업을 완료 할까요?\n      </Modal>\n    </>\n  );\n};\n\nexport default DoneButton;\n","C:\\work\\blueone\\front\\components\\User\\WorkCarousel\\WorkCard\\index.tsx",[],{"ruleId":"223","severity":1,"message":"224","line":38,"column":7,"nodeType":"225","messageId":"226","endLine":38,"endColumn":18},{"ruleId":"223","severity":1,"message":"224","line":40,"column":7,"nodeType":"225","messageId":"226","endLine":40,"endColumn":20},{"ruleId":"223","severity":1,"message":"224","line":54,"column":7,"nodeType":"225","messageId":"226","endLine":54,"endColumn":18},{"ruleId":"223","severity":1,"message":"224","line":56,"column":7,"nodeType":"225","messageId":"226","endLine":56,"endColumn":20},{"ruleId":"227","severity":1,"message":"228","line":38,"column":44,"nodeType":"229","messageId":"230","endLine":38,"endColumn":50},{"ruleId":"223","severity":1,"message":"224","line":44,"column":9,"nodeType":"225","messageId":"226","endLine":44,"endColumn":22},{"ruleId":"227","severity":1,"message":"228","line":32,"column":25,"nodeType":"229","messageId":"230","endLine":32,"endColumn":31,"suggestions":"231"},{"ruleId":"223","severity":1,"message":"224","line":37,"column":7,"nodeType":"225","messageId":"226","endLine":37,"endColumn":20},{"ruleId":"232","severity":1,"message":"233","line":55,"column":5,"nodeType":"234","endLine":55,"endColumn":15,"suggestions":"235"},{"ruleId":"227","severity":1,"message":"228","line":63,"column":27,"nodeType":"229","messageId":"230","endLine":63,"endColumn":33,"suggestions":"236"},{"ruleId":"223","severity":1,"message":"224","line":69,"column":9,"nodeType":"225","messageId":"226","endLine":69,"endColumn":22},{"ruleId":"237","severity":1,"message":"238","line":40,"column":42,"nodeType":"239","messageId":"240","endLine":40,"endColumn":116},{"ruleId":"237","severity":1,"message":"238","line":44,"column":11,"nodeType":"239","messageId":"240","endLine":64,"endColumn":12},{"ruleId":"223","severity":1,"message":"224","line":51,"column":9,"nodeType":"225","messageId":"226","endLine":51,"endColumn":22},{"ruleId":"227","severity":1,"message":"228","line":32,"column":25,"nodeType":"229","messageId":"230","endLine":32,"endColumn":31,"suggestions":"241"},{"ruleId":"223","severity":1,"message":"224","line":37,"column":7,"nodeType":"225","messageId":"226","endLine":37,"endColumn":20},{"ruleId":"227","severity":1,"message":"228","line":51,"column":27,"nodeType":"229","messageId":"230","endLine":51,"endColumn":33,"suggestions":"242"},{"ruleId":"223","severity":1,"message":"224","line":57,"column":9,"nodeType":"225","messageId":"226","endLine":57,"endColumn":22},{"ruleId":"223","severity":1,"message":"224","line":36,"column":7,"nodeType":"225","messageId":"226","endLine":36,"endColumn":20},{"ruleId":"227","severity":1,"message":"228","line":53,"column":36,"nodeType":"229","messageId":"230","endLine":53,"endColumn":89,"suggestions":"243"},{"ruleId":"232","severity":1,"message":"244","line":16,"column":6,"nodeType":"234","endLine":16,"endColumn":8,"suggestions":"245"},{"ruleId":"223","severity":1,"message":"224","line":43,"column":9,"nodeType":"225","messageId":"226","endLine":43,"endColumn":22},{"ruleId":"232","severity":1,"message":"246","line":47,"column":5,"nodeType":"234","endLine":47,"endColumn":41,"suggestions":"247"},{"ruleId":"248","severity":1,"message":"249","line":29,"column":5,"nodeType":"250","messageId":"251","endLine":39,"endColumn":12,"fix":"252"},{"ruleId":"253","severity":1,"message":"254","line":33,"column":1,"nodeType":"255","messageId":"256","endLine":33,"endColumn":13,"fix":"257"},{"ruleId":"253","severity":1,"message":"258","line":34,"column":1,"nodeType":"259","messageId":"256","endLine":34,"endColumn":15,"fix":"260"},{"ruleId":"253","severity":1,"message":"254","line":35,"column":1,"nodeType":"261","messageId":"256","endLine":35,"endColumn":13,"fix":"262"},{"ruleId":"253","severity":1,"message":"254","line":36,"column":1,"nodeType":"255","messageId":"256","endLine":36,"endColumn":13,"fix":"263"},{"ruleId":"253","severity":1,"message":"258","line":37,"column":1,"nodeType":"259","messageId":"256","endLine":37,"endColumn":15,"fix":"264"},{"ruleId":"253","severity":1,"message":"254","line":38,"column":1,"nodeType":"261","messageId":"256","endLine":38,"endColumn":13,"fix":"265"},{"ruleId":"253","severity":1,"message":"266","line":39,"column":1,"nodeType":"261","messageId":"256","endLine":39,"endColumn":11,"fix":"267"},{"ruleId":"232","severity":1,"message":"268","line":40,"column":6,"nodeType":"269","endLine":40,"endColumn":19},{"ruleId":"223","severity":1,"message":"224","line":30,"column":7,"nodeType":"225","messageId":"226","endLine":30,"endColumn":20},{"ruleId":"223","severity":1,"message":"224","line":36,"column":7,"nodeType":"225","messageId":"226","endLine":36,"endColumn":20},"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["270"],"react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'insuranceExpirationDate', 'insuranceNumber', 'licenseNumber', 'licenseType', 'phoneNumber', 'realname', and 'residentRegistrationNumber'. Either include them or remove the dependency array.","ArrayExpression",["271"],["272"],"no-nested-ternary","Do not nest ternary expressions.","ConditionalExpression","noNestedTernary",["273"],["274"],["275"],"React Hook useCallback has a missing dependency: 'form'. Either include it or remove the dependency array.",["276"],"React Hook useCallback has an unnecessary dependency: 'user'. Either exclude it or remove the dependency array.",["277"],"no-confusing-arrow","Arrow function used ambiguously with a conditional expression.","ArrowFunctionExpression","confusing",{"range":"278","text":"279"},"indent","Expected indentation of 10 spaces but found 12.","Identifier","wrongIndentation",{"range":"280","text":"281"},"Expected indentation of 12 spaces but found 14.","Keyword",{"range":"282","text":"283"},"Punctuator",{"range":"284","text":"281"},{"range":"285","text":"281"},{"range":"286","text":"283"},{"range":"287","text":"281"},"Expected indentation of 8 spaces but found 10.",{"range":"288","text":"289"},"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","UnaryExpression",{"messageId":"290","fix":"291","desc":"292"},{"desc":"293","fix":"294"},{"messageId":"290","fix":"295","desc":"292"},{"messageId":"290","fix":"296","desc":"292"},{"messageId":"290","fix":"297","desc":"292"},{"messageId":"290","fix":"298","desc":"292"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},[899,1113],"(typeof window !== 'undefined'\n        ? window.localStorage\n        : {\n            setItem() {\n              return null;\n            },\n            getItem() {\n              return '0';\n            },\n          })",[971,983],"          ",[995,1009],"            ",[1022,1034],[1037,1049],[1061,1075],[1087,1099],[1102,1112],"        ","suggestOptionalChain",{"range":"303","text":"304"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.","Update the dependencies array to be: [insuranceExpirationDate, insuranceNumber, licenseNumber, licenseType, phoneNumber, realname, residentRegistrationNumber]",{"range":"305","text":"306"},{"range":"307","text":"304"},{"range":"308","text":"304"},{"range":"309","text":"304"},{"range":"310","text":"304"},"Update the dependencies array to be: [form]",{"range":"311","text":"312"},"Update the dependencies array to be: [closeModal, setSubmitLoading]",{"range":"313","text":"314"},[1246,1247],"?",[1653,1663],"[insuranceExpirationDate, insuranceNumber, licenseNumber, licenseType, phoneNumber, realname, residentRegistrationNumber]",[1966,1967],[1209,1210],[1777,1778],[1343,1344],[589,591],"[form]",[1535,1571],"[closeModal, setSubmitLoading]"]